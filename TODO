MEGHA OPERATING SYSTEM V2 - x86                                   THINGS TO DO
------------------------------------------------------------------------------

# TASKS

[X] GDT and LDT concept           - 25th Aug 2020
[X] IDT and TSS read              - 1st  Sep 2020
[X] Test Protected mode entry     - 3rd  Sep 2020
[X] x86 Cross compiler setup      - 21st Oct 2020
[X] GDT.c                         - 23rd Oct 2020
[X] VGA text driver               - 1st  Nov 2020
[X] Header file structures        - 1st  Nov 2020
[X] mem.c                         - 1st  Nov 2020
[X] TSS                           - 6th  Nov 2020
[X] Jump to ring 3 (demo)         - 6th  Nov 2020
[X] IDT (demo)                    - 14th Nov 2020
[X] System calls demo (demo)      - 14th Nov 2020
[X] DIV0 handler                  - 17th Nov 2020
[X] 32Bit Paging                  - 19th Dec 2020
[X] Identity Paging (demo)        - 19th Dec 2020
[X] Page fault handler (demo)     - 20th Dec 2020
[X] A way to pass information from 
    bootloader to the kernel      - 31st Dec 2020
[X] Memory detection              - 5th Jan 2021
[X] Check minumum memory in boo1  - 5th Jan 2021
[ ] Document TSS for later        - 17th Nov 2020
[ ] Document BOOTINFO struct      - 3rd Feb 2021
[ ] Basic keyboard ISQ 
    handler (demo)                - 18th Nov 2020
[ ] GP handler                    - 16th Nov 2020
[ ] Page fault handler in asm     - 26th Jan 2021
[ ] Higher half kernel implement  - 31st Jan 2021
[ ] RAMDISK (INITRD.0) creation 
    in build.sh
[ ] BOOT1 to load KLDR 
    (kernel loader) and INITRD.0
[ ] 
# LONG TERM PLANS

## 1. USE UEFI TOGETHER WITH LEGACY BIOS.
[ ] `LoadFile` routine in `boot0` to read from FAT32 not FAT12. 
    This is needed becuase UEFI boot disks must be formated in FAT32.
[ ] (Optional) A seek(..) type routine, so that we can load different parts of 
    file to memory. This comes handy to load the 
    INITRD (which could be > 64 KB). 
    
    This is optional becuase we can live without this routine, if we split our 
    INTRD in two parts. 1st part is smallest, which is loaded by `boo1`, it 
    contains the kernel and rest of the initial part of the OS. The rest will 
    be lumped together in the 2nd INITRD file.

    NOTE: Seek need not be a separate routine, we can just implement it inside 
    the `LoadFile` routine, and take a `start` location as argument.

# BUGS
 
[X] __func__ is giving garbage after paging.s was included.
    If paging.s is compiled with GAS then __func__ is working 
    in the kernel.c

    28th Dec 2020
    Sol: .rodata* section must be before .bss section the KERNEL.ELF file.

# TODOs
 
[X] Can kernel global variables like errno, etc, lie in the kernel, or be 
    placed in the process struct, so that re-entrant kernel problems
    do not occour.
    - Each process has separate kernel data and kernel stack. 
      Thus no conflict, between processes.
[ ] Paging model considerations   - 12th Dec 2020
[X] Higher half kernel read       - 18th Dec 2020
[ ] Usermode application model    - 20th Dec 2020
[ ] UI model considerations       - 25th Dec 2020
[ ] Usermode, Kernel IPC model    - 25th Dec 2020

# READING

[ ] xv6 Book                      - 14th Nov 2020
    https://pdos.csail.mit.edu/6.828/2019/xv6/book-riscv-rev0.pdf 
[X] 8259 datasheet                - 12th Nov 2020
[ ] 820093 datasheet              - 15th Nov 2020
