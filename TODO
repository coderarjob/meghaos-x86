MEGHA OPERATING SYSTEM V2 - x86                                   THINGS TO DO
------------------------------------------------------------------------------

# TASKS                                      Estimated       Actual

[ ] Document BOOTINFO struct                  - 03 Feb 2021
[ ] Basic keyboard IRQ                        - 18 Nov 2020
    handler (demo)
[ ] GP handler                                - 16 Nov 2020
[ ] Page fault handler in asm                 - 26 Jan 2021
[ ] RAMDISK (INITRD.0) creation
    in build.sh
[X] Physical memory allocator                 -
    [ ] Lock to protect the PAB.              -
[ ] Virutal memory allocator                  -
[ ] Various functions like kdisp_ioctl, etc   -
    must implement error reporting.
    [X] kdisp_ioctl
[ ] Make symbols comply with the C99.         -                 30 Dec 2021
    Symbols beginning with underscore is
    reserved [7.13]. Rename them.
    [X] Macros in header files.
    [X] Variable names in C source.
    [X] Members in struct.
    [X] Function names.
    [ ] Guard Macros in header files.
[ ] Configuration header files for C and
    assembly.                                 -
[ ] Script to auto generate the config
    headers simultaneously for C and
    assembly.                                 -
[ ] There is a need to document the types
    declared for MeghaOS like INT, LONG etc.
    These do need to conform with C99, but
    can be different from the compiler
    versions. LONG for example must be 32
    bits or more, but always large enough
    to hold the largest addresses in the
    architecture.                             -
[X] GDT and LDT concept                       - 25 Aug 2020
[X] IDT and TSS read                          - 01 Sep 2020
[X] Test Protected mode entry                 - 03 Sep 2020
[X] x86 Cross compiler setup                  - 21 Oct 2020
[X] GDT.c                                     - 23 Oct 2020
[X] VGA text driver                           - 01 Nov 2020
[X] Header file structures                    - 01 Nov 2020
[X] mem.c                                     - 01 Nov 2020
[X] TSS                                       - 06 Nov 2020
[X] Jump to ring 3 (demo)                     - 06 Nov 2020
[X] IDT (demo)                                - 14 Nov 2020
[X] System calls demo (demo)                  - 14 Nov 2020
[X] DIV0 handler                              - 17 Nov 2020
[X] 32Bit Paging                              - 19 Dec 2020
[X] Identity Paging (demo)                    - 19 Dec 2020
[X] Page fault handler (demo)                 - 20 Dec 2020
[X] A way to pass information from            - 31 Dec 2020
    bootloader to the kernel                  
[X] Memory detection                          - 05 Jan 2021
[X] Check minumum memory in boo1              - 05 Jan 2021
[X] Document TSS for later                    - 17 Nov 2020     28 Jun 2021
[X] Document IDT for later                    - 30 Jun 2021     28 Jun 2021
[X] Document Call Gates                       - 30 Jun 2021     28 Jun 2021
[X] Document Paging                           - 24 Jul 2021     24 Jul 2021
[X] Higher half kernel implement              - 31 Jan 2021     28 Aug 2021
[X] BOOT1 to load Kernel and INITRD.0         -                 25 Aug 2021
[X] Create a tools folder, with scripts to    -
    build gcc cross-compiler.
[X] Idea of VERBOSE to print debug messages   -                 07 Sep 2021
    on screen is faulty. There should be
    options like
        DEBUG_ONSCREEN,
        DEBUG_E9, 
        DEBUG_SERIAL, 
        DEBUG_FILE.
    Correct option is selected based on 
    compiler flags and stage at which 
    the OS is currently.
[X] Create/Update the C style guide.          -                 29 Dec 2021
[-] Instead of just [ER], boot1 should show
    some error code, that identifies the
    failure.                                  -                 9 Han 2022 (see notes below)
    Note: Not done, because there is
    currently only one souce of error in
    each of the routimes. Specific error
    codes will not be benifitial at this
    time.

# LONG TERM PLANS

## 1. USE UEFI TOGETHER WITH LEGACY BIOS.
[ ] `LoadFile` routine in `boot0` to read from FAT32 not FAT12. 
    This is needed becuase UEFI boot disks must be formated in FAT32.
[ ] (Optional) A seek(..) type routine, so that we can load different parts of 
    file to memory. This comes handy to load the 
    INITRD (which could be > 64 KB). 
    
    This is optional becuase we can live without this routine, if we split our 
    INTRD in two parts. 1st part is smallest, which is loaded by `boo1`, it 
    contains the kernel and rest of the initial part of the OS. The rest will 
    be lumped together in the 2nd INITRD file.

    NOTE: Seek need not be a separate routine, we can just implement it inside 
    the `LoadFile` routine, and take a `start` location as argument.

# TODOs
 
[X] Can kernel global variables like errno, etc, lie in the kernel, or be 
    placed in the process struct, so that re-entrant kernel problems
    do not occour.
    - Each process has separate kernel data and kernel stack. 
      Thus no conflict, between processes.
[ ] Paging model considerations   - 12th Dec 2020
[X] Higher half kernel read       - 18th Dec 2020
[ ] Usermode application model    - 20th Dec 2020
[ ] UI model considerations       - 25th Dec 2020
[ ] Usermode, Kernel IPC model    - 25th Dec 2020

# READING

[ ] xv6 Book                      - 14th Nov 2020
    https://pdos.csail.mit.edu/6.828/2019/xv6/book-riscv-rev0.pdf 
[X] 8259 datasheet                - 12th Nov 2020
[ ] 820093 datasheet              - 15th Nov 2020
